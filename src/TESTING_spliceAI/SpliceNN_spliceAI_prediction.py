from keras.models import load_model
from pkg_resources import resource_filename
from spliceai.utils import one_hot_encode
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as pl
# from SpliceNN_utils import *

def main():
    # seq = "GGGATAGAGTCTTAGTTTGAATACCATTGCTAATGGGGTATGATATTTCCAGCTGAAAATGAGAGCCGGAGGCATGAGTGATTCATCCAAATGGAAGAAACAGAAGAGATCCCCTCGGCCCCCACGCCATATGACCAAAGTCACACCAGGTTCAGAGCTGCCCACTCCCAATGGAACCACCTTATCATCTAACCTCACTGGTGAGTGCCCTGGACTACTTCCTCTGATTAGACAAAAGAAGAGCTCCTTTCTCTCTTAGGGATTTTGAAATTGAAGACCAACCAACTGAGGGGCTTTGGTCTTGGCGCTGAGAACAAAAAGGGAAACTCCAGGTCAAATCAGAGTGTGACCATTCAGCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTATGCAGTGACTTAAGGTTGTTCTCTGACAACTTTAGAGACCAATATATGCAAAGATAAGCATGTAATCTGGGAAACAGAGACCCTAGTACCATAGAGGGTTTGTTTTGCCCACAGCCTCTTTCTTCTCCTTCAAGCGTCACATACTTTTCTTGGCAGGTGGCATGCCCTTCATTGATGTGCCCACTCCCATCTCCTCTGCAAGTTCAGAAGCTGCCTCAGCAGTGGTCAGTCCCTCTACAGACAGTGGCCTGGAATTCTCCTCCCAAACCACTTCCAAGGAAGACCTTACTGATCTAGAGCAACCTGGCTCTCCAGGGTACAGCACAGCTACAGAGCCTGGAAGCAGTGAGCTAGGT"
    seq= "tggtcCAAGAACCCAACTTTTAGATCTAGAGTGATGTCAGCATGACATTGATTTCCTGAGGCCCAGGGGTGAAGGAGCTGAGGACAGCAGAGGGGTGAAGGAAGTCAGCTACAGACAGCAGCAGCTGATGCACAGGCCTCCCAGTGCCTGAAGTCACCCGGAATTGGGAAGTGCTCAGAAGCTTACAAAGCTGCCTCGAGGTGGGAACACAACATTAATCCAAGAGCAGATCCCTGATCCTATAAAAATGTACTAGATGCAGTGGGGGCATTTTAAATGAGCAGGGAAGgacagacagataaacagaaggacaaacagTATTGGGATTGGGATAAATGCTCAGCTTTTGcccaaatcttagtgacttaagcatcacttatttgctcacgattctgtggctataaacttgaattatttatgttcagtaattaatgttttagtattgtatcttatttataaatggtctagatatttaatgcaaatcttttacttagcttaactttaaggttaaaaattaccaaaagtactttggaaactattcttaggcagatttactgtaaacaaattatttttgaaataatgtttttcGCTTTTCACAAGACGGCACCGAAAGCGAAGGAAGCTCCTGCTCCTCCTaaagccgaagccaaagcgaaggccttaaaggccaaGAAGGCAGTGTTGAAAGGTGTCCGCAGCCACACGCAAAAAAGAAGATCCGCATGTCACTCACCTTCAGGCGGCCCAAGACACTGCGACTCCGGAGGCAGCCCAGATATCCTCGGAAGAGCACCCCCAGG"
    # seq = "accttctcagatgagcagcagcgttagattctcataggagaacgcaccctgttgtgaaccgtgcatgtgagggatcaaggttgcgctgtccttatgagaatctaatacctattgatctgttactttctcccatcacgctcaggtgggaacatccagttgcaggaaaacaagcttaacacgcccactgattctacattatggtgagttctatgattattttattatatattacagtgtaataatggaaataaagtgcctaataaatgcaaatgtgcttacatcTTTTGGCCCAGCTCCTACCTCCCGGCAGCCTCTCCAGGCCGAGAACTTTCTCCAGTCAGCCTCTACAGACCAAGCTCATGACTCACAATGGCCTATTTAGGCCCATACCCTACGTCACatgagaatctaatacctattgatctgtcactttctcccatcacgctcaggtgggaccatccagttgcaggaaaacaagcttaacacgcccactgattctacattatggtgagttctataattattttattatatattacagtgtaataatgcaaataaagtgcctaataaatgcaaatgtgcttacatcTTTTGGCCCAGCTCCTACCTCCCGGCAGCCTCTCCAGGCCCAGAACTTTCTCCAGTCAGCCTCTACAGACCAAGCTCATGACTCACAATGGCCTATTTAGGCCCATACCCTACGTCACGGCAGCCTCCGCAGATGAGCCTACTGCCTCACAACAGCCTCCACAGGCACAGCTCCATCGTTACAATGGCCTCTTTAGACCCAGCTCCTGCCT"

    seq= "TTTCTCTGCGTCTGGTGGAGGTGCACAGAGGCTTTTGAGTCAGGCCCAAGCGCAGCCAGGTGACCTCCCCGCGGCCTTTCAAGCCTGAGCTCGGTGGACAGCTCCCTCTCCCGTGAGTCCCGCTGTCCTGTACGCGCCCGGTCGAGCCCCGGGCTGCGCACCCCGCTAGGAGGTGGGTACTCGTCCTCCAGGAGTTGCCGGTGAGCCCTTGACCGTGGCAGGTCCCCTCCAGCCGCGAGCGACCCCTCAGTACCTGCCGATGCCTGCTGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGTCTCTGGCATCCTCCAGTCGAGGGTCAGGGTCAGGGAGCAAGGCCTCACGCGGGCGCCCTCCTTGCAGCTGCCCGGCCAGCCCGCTTCTCTGCCCGGAGCCATGAATCTCAGTAGCGCCAGTAGCACGGAGGAAAAGGCAGTGACGACCGTGCTCTGGGGTGAGTGGGGACTCAGGCTCCTTCCCAGAGACACGCCCCACCTCCGGTGCGCGGCAGCTTGGGGCGCAGGTGAGCCCCTCCTTTGGGAACGAATGGAGGGCCCCACTTC"
    # seq = "AGTTCTTTATTGATTGGTGTGCCGTTTTCTCTGGAAGCCTCTTAAGAACACAGTGGCGCAGGCTGGGTGGAGCCGTCCCCCCATGGAGCACAGGCAGACAGAAGTCCCCGCCCCAGCTGTGTGGCCTCAAGCCAGCCTTCCGCTCCTTGAAGCTGGTCTCCACACAGTGCTGGTTCCGTCACCCCCTCCCAAGGAAGTAGGTCTGAGCAGCTTGTCCTGGCTGTGTCCATGTCAGAGCAACGGCCCAAGTCTGGGTCTGGGGGGGAAGGTGTCATGGAGCCCCCTACGATTCCCAGTCGTCCTCGTCCTCCTCTGCCTGTGGCTGCTGCGGTGGCGGCAGAGGAGGGATGGAGTCTGACACGCGGGCAAAGGCTCCTCCGGGCCCCTCACCAGCCCCAGGTTTATTGATTGGTGTGCCGTTTTCTCTGGAAGCCTCTTAAGAGAAGAACACAGTGGCGCAGGCTGGGTGGAGCCGTCCCCCCATGGAGCACAGGCAGACAAAAGTCCCCGCCCCAGCTGTGTGGCCTCAAGCCAGCCTTCCGCTCCTTGAAGCTGGTCTCCACACAGTGCTGGTTCCGTCACCCCCTCCCAAGGAAGTAGGTCTGAGCAGCTTGTCCTGGCTGTGTCCATGTCAGAGCAACGGCCCAAGTCTGGGTCTGGGGGGGAAGGTGTCATGGAGCCCCCTAGGATTCCCAGTCGTCCTCGTCCTCCTCTGCCTGTGGCTGCTGCGGTGGCGGCAGAGGAGGGATGGAGTCTGACACGCGGGCAAAGGCTCCTCCGGGCCCCTCACCAGCCCCAGG"

    # seq = "AGGCTGAGGCAGGCAGATCATCTGAGGTCAGGAGTTCAGGACCAGCCTGGCCAACATGATGAAACCGCGTCTCTACTGAAAATACCAAAATTAGAGGGGCATGGTGGTGGTCACCTGTAATCCCAGCTACTTGGGAGGCCGAGGCAGGAGAACTGCTCAAAACTGGGAGGCAGAGGTTGCAGTGAGCCGAGATCACGCCACGACACTCCAGCCTGGGTGGCAGAGCAAGACTCTGTCTCAAAAAAAAAAAAAAGATACCTCATTATAATTTTAATTATAGTTTTGAACACCAGTAAGGTTACACACTTTTTCTTATGAATGTTATTTGTCTATTTTGAAATAGCTTTCTAATAATCACAATCTAAATCTACTTTATTCCTGAAAGGTCAGTTGTGGGTTGCATGTGGAAAATGCTCCTCTGCAGCAGAAGTATAATTGCCTTTCATTCCTTCGAGATGCTCTTGCAGGAGTAGGCAAGAATGTTGATCTGCCATCTATTCTTAACAAGGAGAGAAAGCAGAAATGTGGACTAAGGATTGTTAGGGGAAAGCAATTTAGATGGAATCAGGTACTACAATGTGCCAAATGATATGATGATTAGATCTGTTTGAACCCTGTTTAAGCCTTTATGAGGATTTTTTTTTAATGGCAAACTATCTTGGAGCTCTGCCCACAAGGCAAATGGCTACTAACCAAAGACTATTTATTTGCAGAAAATCCATCAAAGTCGTTACATGCAGATGAGTCACAAAGAGAAGATATCATCCTTTCATGATCCCCAGCCCCACTTCACCAAACTG"
    
    context = 10000
    paths = ('./MODEL/spliceAI/spliceai{}.h5'.format(x) for x in range(1, 6))
    print(paths)
    models = [load_model(x) for x in paths]
    x = one_hot_encode('N'*(context//2) + seq + 'N'*(context//2))[None, :]
    y = np.mean([models[m].predict(x) for m in range(5)], axis=0)

    acceptor_prob = y[0, :, 1]
    donor_prob = y[0, :, 2]

    y_pos = np.arange(len(acceptor_prob))

    print("acceptor_prob: ", acceptor_prob)
    print("donor_prob: ", donor_prob)

    fig, ax = plt.subplots(figsize=(12, 6))
    ax2 = ax.twinx()  

    ax.bar(y_pos, acceptor_prob, align='center', alpha=0.5, width=5, color="blue")
    ax2.bar(y_pos, donor_prob, align='center', alpha=0.5, width=5, color="red")

    # for label in (ax.get_xticklabels() + ax.get_yticklabels()):
    #     label.set_fontsize(10)
    # plt.rc('xtick',labelsize=3)
    # plt.xticks(y_pos, rotation = 45)
    plt.ylabel('SpliceNN prediction score')
    plt.title('SpliceNN')

    plt.savefig("spliceNN", dpi=300)



    # A_accuracy, A_auc = print_top_1_statistics(Acceptor_YL, Acceptor_YP)
    # D_accuracy, D_auc = print_top_1_statistics(Donor_YL, Donor_YP)
    # # print("labels: ", labels)
    # # print("Acceptor_YL: ", Acceptor_YL)
    # # print("Acceptor_YP: ", Acceptor_YP)
    # # print("Donor_YL: ", Donor_YL)
    # # print("Donor_YP: ", Donor_YP)

    # print("A_accuracy: ", A_accuracy)
    # print("A_auc     : ", A_auc)
    # print("D_accuracy: ", D_accuracy)
    # print("D_auc     : ", D_auc)

if __name__ == "__main__":
    main()